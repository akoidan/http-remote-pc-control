#include <Carbon/Carbon.h> /* Really only need <HIToolbox/Events.h> */
#include <ApplicationServices/ApplicationServices.h>
#import <IOKit/hidsystem/ev_keymap.h>
#include <map>
#include <string>

std::map<std::string, CGKeyCode> key_names;

__attribute__((constructor))
static void initialize_key_names() {
    key_names = {
        {"numpad_decimal",   kVK_ANSI_KeypadDecimal},
        {"enter",            kVK_ANSI_KeypadEnter},
        {"clear",            kVK_ANSI_KeypadClear},
        {"add",              kVK_ANSI_KeypadPlus},
        {"subtract",         kVK_ANSI_KeypadMinus},
        {"multiply",         kVK_ANSI_KeypadMultiply},
        {"divide",           kVK_ANSI_KeypadDivide},
        {"backspace",        kVK_Delete},
        {"delete",           kVK_ForwardDelete},
        {"return",           kVK_Return},
        {"tab",              kVK_Tab},
        {"escape",           kVK_Escape},
        {"up",               kVK_UpArrow},
        {"down",             kVK_DownArrow},
        {"right",            kVK_RightArrow},
        {"left",             kVK_LeftArrow},
        {"home",             kVK_Home},
        {"end",              kVK_End},
        {"pageup",           kVK_PageUp},
        {"pagedown",         kVK_PageDown},
        {"space",            kVK_Space},
        {"f1",               kVK_F1},
        {"f2",               kVK_F2},
        {"f3",               kVK_F3},
        {"f4",               kVK_F4},
        {"f5",               kVK_F5},
        {"f6",               kVK_F6},
        {"f7",               kVK_F7},
        {"f8",               kVK_F8},
        {"f9",               kVK_F9},
        {"f10",              kVK_F10},
        {"f11",              kVK_F11},
        {"f12",              kVK_F12},
        {"f13",              kVK_F13},
        {"f14",              kVK_F14},
        {"f15",              kVK_F15},
        {"f16",              kVK_F16},
        {"f17",              kVK_F17},
        {"f18",              kVK_F18},
        {"f19",              kVK_F19},
        {"f20",              kVK_F20},
        {"a",                kVK_ANSI_A},
        {"b",                kVK_ANSI_B},
        {"c",                kVK_ANSI_C},
        {"d",                kVK_ANSI_D},
        {"e",                kVK_ANSI_E},
        {"f",                kVK_ANSI_F},
        {"g",                kVK_ANSI_G},
        {"h",                kVK_ANSI_H},
        {"i",                kVK_ANSI_I},
        {"j",                kVK_ANSI_J},
        {"k",                kVK_ANSI_K},
        {"l",                kVK_ANSI_L},
        {"m",                kVK_ANSI_M},
        {"n",                kVK_ANSI_N},
        {"o",                kVK_ANSI_O},
        {"p",                kVK_ANSI_P},
        {"q",                kVK_ANSI_Q},
        {"r",                kVK_ANSI_R},
        {"s",                kVK_ANSI_S},
        {"t",                kVK_ANSI_T},
        {"u",                kVK_ANSI_U},
        {"v",                kVK_ANSI_V},
        {"w",                kVK_ANSI_W},
        {"x",                kVK_ANSI_X},
        {"y",                kVK_ANSI_Y},
        {"z",                kVK_ANSI_Z},
        {"0",                kVK_ANSI_0},
        {"1",                kVK_ANSI_1},
        {"2",                kVK_ANSI_2},
        {"3",                kVK_ANSI_3},
        {"4",                kVK_ANSI_4},
        {"5",                kVK_ANSI_5},
        {"6",                kVK_ANSI_6},
        {"7",                kVK_ANSI_7},
        {"8",                kVK_ANSI_8},
        {"9",                kVK_ANSI_9},
        {",",                kVK_ANSI_Comma},
        {".",                kVK_ANSI_Period},
        {"/",                kVK_ANSI_Slash},
        {";",                kVK_ANSI_Semicolon},
        {"'",                kVK_ANSI_Quote},
        {"[",                kVK_ANSI_LeftBracket},
        {"]",                kVK_ANSI_RightBracket},
        {"\\",               kVK_ANSI_Backslash},
        {"-",                kVK_ANSI_Minus},
        {"=",                kVK_ANSI_Equal},
        {"`",                kVK_ANSI_Grave},
        {"meta",             kVK_Command},
        {"right_meta",       kVK_RightCommand},
        {"cmd",              kVK_Command},
        {"right_cmd",        kVK_RightCommand},
        {"win",              0},
        {"right_win",        0},
        {"alt",              kVK_Option},
        {"right_alt",        kVK_RightOption},
        {"control",          kVK_Control},
        {"right_control",    kVK_RightControl},
        {"shift",            kVK_Shift},
        {"right_shift",      kVK_RightShift},
        {"insert",           0},
        {"printscreen",      0},
        {"menu",             0},
        {"fn",               kVK_Function},
        {"pause",            0},
        {"caps_lock",        kVK_CapsLock},
        {"num_lock",         0},
        {"scroll_lock",      0},
        {"audio_mute",       1007},
        {"audio_vol_down",   1001},
        {"audio_vol_up",     1000},
        {"audio_play",       1016},
        {"audio_stop",       0},
        {"audio_pause",      1016},
        {"audio_prev",       1018},
        {"audio_next",       1017},
        {"audio_rewind",     0},
        {"audio_forward",    0},
        {"audio_repeat",     0},
        {"audio_random",     0},
        {"numpad_0",         kVK_ANSI_Keypad0},
        {"numpad_1",         kVK_ANSI_Keypad1},
        {"numpad_2",         kVK_ANSI_Keypad2},
        {"numpad_3",         kVK_ANSI_Keypad3},
        {"numpad_4",         kVK_ANSI_Keypad4},
        {"numpad_5",         kVK_ANSI_Keypad5},
        {"numpad_6",         kVK_ANSI_Keypad6},
        {"numpad_7",         kVK_ANSI_Keypad7},
        {"numpad_8",         kVK_ANSI_Keypad8},
        {"numpad_9",         kVK_ANSI_Keypad9},
        {"lights_mon_up",    1002},
        {"lights_mon_down",  1003},
        {"lights_kbd_toggle", 1023},
        {"lights_kbd_up",    1021},
        {"lights_kbd_down",  1022}
    };
}

typedef CGKeyCode MMKeyCode;