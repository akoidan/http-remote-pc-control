{
  "extends": [
    "eslint:all",
    "plugin:@typescript-eslint/all",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:sonarjs/recommended"
  ],
  "plugins": [
    "only-warn",
    "babel",
    "sonarjs",
    "filenames",
    "unicorn"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "sourceType": "module",
    "project": "./tsconfig.json",
    "warnOnUnsupportedTypeScriptVersion": false
  },
  "rules": {
    "unicorn/filename-case": [1, {
      "case": "kebabCase"
    }],
    "no-restricted-syntax": [
      1,
      {
        "message": "Forbidden direct call of useRote, use useRouterSectionParams composition api instead",
        "selector": "CallExpression[callee.name='useRoute']"
      },
      {
        "selector": "CallExpression[callee.object.name='logger']:not([parent.type='CallExpression'])",
        "message": "You must call logger.[log,warning,debug,trace,error](\"message\")() as a function 2 times"
      }
    ],
    "max-lines": ["error", { "max": 155 }], // untill we refactor hra-quiz
    "indent": 0,
    "filenames/match-regex": [1, "^[a-z0-9\\-]+(\\.[a-z]+)?$", true],
    "dot-location": [1, "property"],
    "no-warning-comments": 0,
    "object-curly-spacing": 0,
    "sort-keys": 0,
    "id-length": 0,
    "lines-around-comment": 0, // this breaks padded-blocks rule
    "no-mixed-operators": 0, // doesn't work with no extra parens
    "init-declarations": 0, // poor choice
    "func-style": [1, "declaration"],
    "one-var": 0, // poor choice
    "multiline-comment-style": [1, "separate-lines"], // turned off by default
    "no-plusplus": 0, // too aggresive
    "quote-props": [1, "as-needed"],
    "camelcase": 0, // replaced with babel-camelcase
    "no-ternary": 0, // too aggressive
    "multiline-ternary": 0,
    "sort-imports": 0,
    "new-cap": 0, // babel/new-cap
    "array-element-newline": [1, "consistent"],
    "comma-dangle": 0, // using typescript-eslint/comma-dangle
    "function-call-argument-newline": [1, "consistent"],
    "max-len": [1, { "code": 180, "ignoreTrailingComments": true}], // override 80 that is too low
    "padded-blocks": [1, "never"],
    "max-statements": [1, 25],
    "quotes": [1, "single"],
    "function-paren-newline": [1, "consistent"],
    "no-inline-comments": 0,
    "capitalized-comments": 0,
    "no-confusing-arrow": 0, // conflict with no-extra-parens
    "max-params": 0,
    "no-void": [0], // allow void for void promise
    "@typescript-eslint/no-untyped-public-signature": 0, // this breaks a lot: constructions public, ES6 settsetter should have return type etc
    "@typescript-eslint/ban-ts-ignore": 0, // who cares, we explicitly define it.
    "@typescript-eslint/ban-ts-comment": 0, // who cares, we explicitly define it.
    "@typescript-eslint/block-spacing": 0,
    "@typescript-eslint/class-methods-use-this": 0,
    "@typescript-eslint/member-ordering": 0,
    "@typescript-eslint/space-before-function-paren": [1, "never"],
    "@typescript-eslint/strict-boolean-expressions": 0,
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-unnecessary-type-assertion": 0, // this shity rule has bugs during lint:fix
    "@typescript-eslint/indent": 0,
    "@typescript-eslint/parameter-properties": [1, {"allow": ["private readonly", "public readonly"]}],
    "@typescript-eslint/no-inferrable-types": 0, // @typescript-eslint/typedef
    "@typescript-eslint/no-non-null-assertion": 0,
    "@typescript-eslint/no-unused-vars":  [1,   {
      "argsIgnorePattern": "^_", // Ignore unused function parameters starting with '_'
      "varsIgnorePattern": "^_", // Ignore unused variables starting with '_'
      "caughtErrorsIgnorePattern": "^_" // Ignore unused catch block variables starting with '_'
    }], // doesn't work in decorators. e.g. src/ts/store/default-store.ts if the value is passed to decorator param
    "@typescript-eslint/no-type-alias": 0,
    "@typescript-eslint/no-parameter-properties": 0,
    "@typescript-eslint/no-magic-numbers": 0,
    "@typescript-eslint/no-explicit-any": 0,
    "@typescript-eslint/parameter-properties": 0,
    "@typescript-eslint/adjacent-overload-signatures": 0,
    "@typescript-eslint/comma-dangle": [1, "always-multiline"],
    "@typescript-eslint/method-signature-style": [1, "method"],
    "@typescript-eslint/init-declarations": 0, // let a ; try {a = funct()} catch (e) throw e; if a.sdfsd . In this example we can't have instant init
    "@typescript-eslint/prefer-readonly-parameter-types": 0, // too many issues, we can't mofidy arguments, we can' use type like number[], because rule @typescript-eslint/array-type
    "@typescript-eslint/naming-convention": [1, {"selector": "property", "format": ["PascalCase", "camelCase"],  "filter": {"regex": "update:\\w+", "match": false}}],
    "babel/object-curly-spacing": 1,
    "@typescript-eslint/max-params": 0,
    "babel/quotes": 0,
    "@typescript-eslint/quotes": [1, "single"],
    "babel/semi": 1,
    "babel/no-unused-expressions": 1,
    "babel/valid-typeof": 1,
    "babel/new-cap": 0,
    "babel/camelcase": 0, // use typescript-eslint/naming-convention
    "babel/no-invalid-this": 1,
    "import/no-named-as-default": 1, //is not part of default sert
    "import/no-unresolved": 0,
    "import/no-relative-parent-imports": 1,
    "import/dynamic-import-chunkname": 0,
    "import/exports-last":1,
//    "import/extensions": [1, "never", {"json":  "always", "vue": "always", "sass": "always", "png":  "always", "wav": "always", "mp3": "always"}],
    "import/first":1,
    "import/group-exports": 1, // vue3
    "import/max-dependencies": 0,
    "import/newline-after-import": 1,
    "import/no-absolute-path":1,
    "import/no-amd": 1,
    "no-param-reassign": 0,
    "no-undefined": 0,
    "import/no-anonymous-default-export":1,
    "import/no-commonjs": 1,
    "import/no-cycle":1,
    "import/no-default-export": 1,
    "import/no-deprecated":1,
    "import/no-dynamic-require": 1,
    "import/no-extraneous-dependencies":1,
    "import/no-internal-modules": [ 1, {"allow": [ "@nut-tree-fork/**"]} ],
    "import/no-mutable-exports":1,
    "import/no-named-default": 1,
    "max-classes-per-file": 0,
    "@typescript-eslint/no-extraneous-class": 0,
    "@typescript-eslint/no-confusing-void-expression": 0,
    "@typescript-eslint/no-unsafe-assignment": 0,
    "@typescript-eslint/no-unsafe-member-access": 0,
    "@typescript-eslint/no-unsafe-call": 0,
    "import/no-named-export":0, // we want them
    "import/no-namespace": 0,
    "import/no-nodejs-modules": 0,
    "import/no-restricted-paths": 1,
    "import/no-self-import":1,
    "grouped-accessor-pairs": 0, // conflicts with public first
    "import/no-unused-modules":1,
    "import/no-useless-path-segments": 1,
    "import/no-webpack-loader-syntax":1,
    "import/order": 0, // doesn't work with sorted-import
    "import/prefer-default-export":0, // default exports are hell to IDE refactor support
    "import/unambiguous": 1,
    "class-methods-use-this": 0,
    "@typescript-eslint/no-unnecessary-condition": 0, // too many times we want to make sure that variable that is not null is present or not. Let's say window.RTPConnection is declaread as non-nullable but we still check it in runtime
    "line-comment-position": 0,
    "arrow-body-style": 0,
    "sonarjs/no-duplicate-string": 1,
    "@typescript-eslint/unbound-method": 0, // composition api
    "@typescript-eslint/no-use-before-define": 1
  },
  "overrides": [
    {
      "files": ["src/test/**"],
      "rules": {
      }
    }
  ]
}
