#include <Carbon/Carbon.h> /* Really only need <HIToolbox/Events.h> */
#include <ApplicationServices/ApplicationServices.h>
#import <IOKit/hidsystem/ev_keymap.h>

enum _MMKeyCode {
    K_NOT_A_KEY = 9999,

    K_BACKSPACE = kVK_Delete,
    K_DELETE = kVK_ForwardDelete,
    K_RETURN = kVK_Return,
    K_TAB = kVK_Tab,
    K_ESCAPE = kVK_Escape,
    K_UP = kVK_UpArrow,
    K_DOWN = kVK_DownArrow,
    K_RIGHT = kVK_RightArrow,
    K_LEFT = kVK_LeftArrow,
    K_HOME = kVK_Home,
    K_END = kVK_End,
    K_PAGEUP = kVK_PageUp,
    K_PAGEDOWN = kVK_PageDown,

    K_A = kVK_ANSI_A,
    K_B = kVK_ANSI_B,
    K_C = kVK_ANSI_C,
    K_D = kVK_ANSI_D,
    K_E = kVK_ANSI_E,
    K_F = kVK_ANSI_F,
    K_G = kVK_ANSI_G,
    K_H = kVK_ANSI_H,
    K_I = kVK_ANSI_I,
    K_J = kVK_ANSI_J,
    K_K = kVK_ANSI_K,
    K_L = kVK_ANSI_L,
    K_M = kVK_ANSI_M,
    K_N = kVK_ANSI_N,
    K_O = kVK_ANSI_O,
    K_P = kVK_ANSI_P,
    K_Q = kVK_ANSI_Q,
    K_R = kVK_ANSI_R,
    K_S = kVK_ANSI_S,
    K_T = kVK_ANSI_T,
    K_U = kVK_ANSI_U,
    K_V = kVK_ANSI_V,
    K_W = kVK_ANSI_W,
    K_X = kVK_ANSI_X,
    K_Y = kVK_ANSI_Y,
    K_Z = kVK_ANSI_Z,

    K_COMMA = kVK_ANSI_Comma,
    K_PERIOD = kVK_ANSI_Period,
    K_SLASH = kVK_ANSI_Slash,

    K_SEMICOLON = kVK_ANSI_Semicolon,
    K_QUOTE = kVK_ANSI_Quote,
    K_LEFTBRACKET = kVK_ANSI_LeftBracket,
    K_RIGHTBRACKET = kVK_ANSI_RightBracket,
    K_BACKSLASH = kVK_ANSI_Backslash,

    K_MINUS = kVK_ANSI_Minus,
    K_EQUAL = kVK_ANSI_Equal,

    K_GRAVE = kVK_ANSI_Grave,

    K_F1 = kVK_F1,
    K_F2 = kVK_F2,
    K_F3 = kVK_F3,
    K_F4 = kVK_F4,
    K_F5 = kVK_F5,
    K_F6 = kVK_F6,
    K_F7 = kVK_F7,
    K_F8 = kVK_F8,
    K_F9 = kVK_F9,
    K_F10 = kVK_F10,
    K_F11 = kVK_F11,
    K_F12 = kVK_F12,
    K_F13 = kVK_F13,
    K_F14 = kVK_F14,
    K_F15 = kVK_F15,
    K_F16 = kVK_F16,
    K_F17 = kVK_F17,
    K_F18 = kVK_F18,
    K_F19 = kVK_F19,
    K_F20 = kVK_F20,
    K_F21 = K_NOT_A_KEY,
    K_F22 = K_NOT_A_KEY,
    K_F23 = K_NOT_A_KEY,
    K_F24 = K_NOT_A_KEY,

    K_META = kVK_Command,
    K_RIGHTMETA = kVK_RightCommand,

    K_CMD = kVK_Command,
    K_RIGHTCMD = kVK_RightCommand,

    K_WIN = K_NOT_A_KEY,
    K_RIGHTWIN = K_NOT_A_KEY,

    K_FUNCTION = kVK_Function,
    K_PAUSE = K_NOT_A_KEY,

    K_ALT = kVK_Option,
    K_RIGHTALT = kVK_RightOption,

    K_CONTROL = kVK_Control,
    K_RIGHTCONTROL = kVK_RightControl,

    K_SHIFT = kVK_Shift,
    K_RIGHTSHIFT = kVK_RightShift,

    K_CAPSLOCK = kVK_CapsLock,
    K_NUMLOCK = K_NOT_A_KEY,
    K_SCROLL_LOCK = K_NOT_A_KEY,

    K_SPACE = kVK_Space,
    K_INSERT = K_NOT_A_KEY,
    K_PRINTSCREEN = K_NOT_A_KEY,
    K_MENU = K_NOT_A_KEY,

    K_ADD = kVK_ANSI_KeypadPlus,
    K_SUBTRACT = kVK_ANSI_KeypadMinus,
    K_DIVIDE = kVK_ANSI_KeypadDivide,
    K_MULTIPLY = kVK_ANSI_KeypadMultiply,
    K_ENTER = kVK_ANSI_KeypadEnter,
    K_CLEAR = kVK_ANSI_KeypadClear,

    K_0 = kVK_ANSI_0,
    K_1 = kVK_ANSI_1,
    K_2 = kVK_ANSI_2,
    K_3 = kVK_ANSI_3,
    K_4 = kVK_ANSI_4,
    K_5 = kVK_ANSI_5,
    K_6 = kVK_ANSI_6,
    K_7 = kVK_ANSI_7,
    K_8 = kVK_ANSI_8,
    K_9 = kVK_ANSI_9,

    K_NUMPAD_0 = kVK_ANSI_Keypad0,
    K_NUMPAD_1 = kVK_ANSI_Keypad1,
    K_NUMPAD_2 = kVK_ANSI_Keypad2,
    K_NUMPAD_3 = kVK_ANSI_Keypad3,
    K_NUMPAD_4 = kVK_ANSI_Keypad4,
    K_NUMPAD_5 = kVK_ANSI_Keypad5,
    K_NUMPAD_6 = kVK_ANSI_Keypad6,
    K_NUMPAD_7 = kVK_ANSI_Keypad7,
    K_NUMPAD_8 = kVK_ANSI_Keypad8,
    K_NUMPAD_9 = kVK_ANSI_Keypad9,
    K_NUMPAD_DECIMAL = kVK_ANSI_KeypadDecimal,

    K_AUDIO_VOLUME_MUTE = 1007,
    K_AUDIO_VOLUME_DOWN = 1001,
    K_AUDIO_VOLUME_UP = 1000,
    K_AUDIO_PLAY = 1016,
    K_AUDIO_STOP = K_NOT_A_KEY,
    K_AUDIO_PAUSE = 1016,
    K_AUDIO_PREV = 1018,
    K_AUDIO_NEXT = 1017,
    K_AUDIO_REWIND = K_NOT_A_KEY,
    K_AUDIO_FORWARD = K_NOT_A_KEY,
    K_AUDIO_REPEAT = K_NOT_A_KEY,
    K_AUDIO_RANDOM = K_NOT_A_KEY,

    K_LIGHTS_MON_UP = 1002,
    K_LIGHTS_MON_DOWN = 1003,
    K_LIGHTS_KBD_TOGGLE = 1023,
    K_LIGHTS_KBD_UP = 1021,
    K_LIGHTS_KBD_DOWN = 1022
};

typedef CGKeyCode MMKeyCode;